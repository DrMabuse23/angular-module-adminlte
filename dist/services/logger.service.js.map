{"version":3,"sources":["../../src/services/logger.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAkB,MAAO,eAAA,CAAgB;AAElD,OAAO,EAAE,gBAAA,EAAiB,MAAO,qBAAA,CAAsB;AAGvD;IAEI,uBAAqB,SAA2B;QAA3B,cAAS,GAAT,SAAS,CAAkB;QAC5C,OAAO;IACX,CAAC;IAEM,2BAAG,GAAV,UAAY,SAAiB,EAAE,GAAY,EAAE,OAAgB,EAAE,IAAe;QAC1E,EAAE,CAAC,CAAE,IAAK,CAAC,CAAC,CAAC;YACT,EAAE,CAAC,CAAE,OAAQ,CAAC,CAAC,CAAC;gBACZ,IAAI,MAAM,GAAO,EAAE,CAAC;gBACpB,EAAE,CAAC,CAAE,IAAK,CAAC,CAAC,CAAC;oBACT,MAAM,GAAG,CAAE,IAAI,CAAC,CAAC,CAAC,CAAE,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,GAAG,MAAM,CAAC;oBAC/C,MAAM,GAAG,CAAE,IAAI,CAAC,CAAC,CAAC,CAAE,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,GAAG,MAAM,CAAC;oBAC3D,MAAM,GAAG,CAAE,IAAI,CAAC,CAAC,CAAC,CAAE,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,GAAG,MAAM,CAAC;gBAC3E,CAAC;gBACD,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC,GAAG,CAAE,OAAO,EAAE,MAAM,CAAE,CAAC,SAAS,CAAC,UAAE,GAAW;oBACxE,OAAO,CAAC,GAAG,CAAE,SAAS,GAAG,IAAI,GAAG,GAAG,CAAE,CAAC;gBAC1C,CAAC,CAAC,CAAC;YACP,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,OAAO,CAAC,GAAG,CAAE,SAAS,GAAG,IAAI,GAAG,GAAG,CAAE,CAAC;YAC1C,CAAC;QACL,CAAC;IACL,CAAC;IACE,wBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,4BAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,gBAAgB,GAAG;KACzB,EAF6F,CAE7F,CAAC;IACF,oBAAC;CA9BD,AA8BC,IAAA;SA9BY,aAAa","file":"logger.service.js","sourceRoot":"","sourcesContent":["import { Injectable, Input } from '@angular/core';\r\nimport { UserService } from './user.service';\r\nimport { TranslateService } from './translate.service';\r\n\r\n\r\nexport class LoggerService {\r\n\r\n    constructor( private translate: TranslateService ) {\r\n        // TODO\r\n    }\r\n\r\n    public log( component: string, msg?: string, i18nRef?: string, data?: string[] ) {\r\n        if ( true ) {\r\n            if ( i18nRef ) {\r\n                let params: {} = {};\r\n                if ( data ) {\r\n                    params = ( data[0] ) ? { 0: data[0] } : params;\r\n                    params = ( data[1] ) ? { 0: data[0], 1: data[1] } : params;\r\n                    params = ( data[2] ) ? { 0: data[0], 1: data[1], 2: data[2] } : params;\r\n                }\r\n                this.translate.getTranslate().get( i18nRef, params ).subscribe(( res: string ) => {\r\n                    console.log( component + ': ' + res );\r\n                });\r\n            } else {\r\n                console.log( component + ': ' + msg );\r\n            }\r\n        }\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TranslateService, },\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}