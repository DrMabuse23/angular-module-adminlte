{"version":3,"sources":["../../../src/services/translate.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAmB,MAAO,eAAA,CAAgB;AACnD,OAAO,EAAE,gBAAA,IAAoB,mBAAA,EAAoB,MAAO,qBAAA,CAAsB;AAC9E,OAAO,EAAE,WAAA,EAAY,MAAO,gBAAA,CAAiB;AAG7C,IAAM,KAAA,GAAQ,CAAA,IAAE,EAAK,IAAA,EAAM,IAAA,EAAM,IAAA,EAAM,IAAA,CAAK,CAAC;AAC7C,IAAM,SAAA,GAAY,gBAAA,CAAiB;AAGnC;IAII,0BAAqB,QAAqB,EAAU,SAA8B;QAAlF,iBA0BC;QA1BoB,aAAQ,GAAR,QAAQ,CAAa;QAAU,cAAS,GAAT,SAAS,CAAqB;QAH1E,SAAI,GAAG,IAAI,CAAC;QAIhB,SAAS,CAAC,QAAQ,CAAE,KAAK,CAAE,CAAC;QAC5B,kGAAkG;QAClG,SAAS,CAAC,cAAc,CAAE,IAAI,CAAE,CAAC;QAEjC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,UAAE,IAAU;YAC5C,KAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YAExB,2FAA2F;YAC3F,IAAM,WAAW,GAAG,KAAI,CAAC,SAAS,CAAC,cAAc,EAAE,CAAC;YACpD,IAAM,kBAAkB,GAAG,KAAI,CAAC,SAAS,CAAC,qBAAqB,EAAE,CAAC;YAClE,OAAO,CAAC,GAAG,CAAE,8BAA8B,GAAG,kBAAkB,GAAG,GAAG,CAAE,CAAC;YAEzE,2FAA2F;YAC3F,IAAI,OAAO,GAAG,IAAI,CAAC;YACnB,IAAM,QAAQ,GAAG,CAAE,KAAI,CAAC,WAAW,CAAE,GAAG,KAAI,CAAC,WAAW,CAAC,aAAa,GAAG,IAAI,CAAC;YAC9E,EAAE,CAAC,CAAE,CAAC,QAAS,CAAC,CAAC,CAAC;gBACd,OAAO,GAAG,WAAW,CAAC,KAAK,CAAE,SAAS,CAAE,GAAG,WAAW,GAAG,IAAI,CAAC;YAClE,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,OAAO,CAAC,GAAG,CAAE,qCAAqC,GAAG,QAAQ,GAAG,GAAG,CAAE,CAAC;gBACtE,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAE,SAAS,CAAE,GAAG,QAAQ,GAAG,IAAI,CAAC;YAC5D,CAAC;YACD,KAAI,CAAC,SAAS,CAAC,GAAG,CAAE,OAAO,CAAE,CAAC;YAC9B,OAAO,CAAC,GAAG,CAAE,yCAAyC,GAAG,OAAO,GAAG,GAAG,CAAE,CAAC;YACzE,yBAAyB;QAC7B,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,mCAAQ,GAAf;QACI,OAAO;IACX,CAAC;IAEM,uCAAY,GAAnB;QACI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;IAEE,2BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,+BAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,WAAW,GAAG;QACrB,EAAC,IAAI,EAAE,mBAAmB,GAAG;KAC5B,EAH6F,CAG7F,CAAC;IACF,uBAAC;CAhDD,AAgDC,IAAA;SAhDY,gBAAgB","file":"translate.service.js","sourceRoot":"","sourcesContent":["import { Injectable, OnInit } from '@angular/core';\r\nimport { TranslateService as NGXTranslateService } from '@ngx-translate/core';\r\nimport { UserService } from './user.service';\r\nimport { User } from '../models/user';\r\n\r\nconst langs = ['en', 'fr', 'ru', 'he', 'zh'];\r\nconst langmatch = /en|fr|ru|he|zh/;\r\n\r\n\r\nexport class TranslateService implements OnInit {\r\n    private lang = 'us';\r\n    private currentUser: User;\r\n\r\n    constructor( private userServ: UserService, private translate: NGXTranslateService ) {\r\n        translate.addLangs( langs );\r\n        // this language will be used as a fallback when a translation isn't found in the current language\r\n        translate.setDefaultLang( 'en' );\r\n\r\n        this.userServ.currentUser.subscribe(( user: User ) => {\r\n            this.currentUser = user;\r\n\r\n            // the lang to use, if the lang isn't available, it will use the current loader to get them\r\n            const browserLang = this.translate.getBrowserLang();\r\n            const browserCultureLang = this.translate.getBrowserCultureLang();\r\n            console.log( 'Detected browser language: \"' + browserCultureLang + '\"' );\r\n\r\n            // check if current User has a Preferred Language set, and it differs from his browser lang\r\n            let useLang = 'en';\r\n            const prefLang = ( this.currentUser ) ? this.currentUser.preferredLang : null;\r\n            if ( !prefLang ) {\r\n                useLang = browserLang.match( langmatch ) ? browserLang : 'en';\r\n            } else {\r\n                console.log( 'Detected User preferred language: \"' + prefLang + '\"' );\r\n                useLang = prefLang.match( langmatch ) ? prefLang : 'en';\r\n            }\r\n            this.translate.use( useLang );\r\n            console.log( 'Translation language has been set to: \"' + useLang + '\"' );\r\n            // translate.use( 'ru' );\r\n        });\r\n    }\r\n\r\n    public ngOnInit() {\r\n        // TODO\r\n    }\r\n\r\n    public getTranslate(): NGXTranslateService {\r\n        return this.translate;\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: UserService, },\n{type: NGXTranslateService, },\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}