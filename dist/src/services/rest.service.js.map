{"version":3,"sources":["../../../src/services/rest.service.ts"],"names":[],"mappings":"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","file":"rest.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Http, Response, Headers } from '@angular/http';\r\nimport 'rxjs/add/operator/map';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\n\r\nexport class RestService {\r\n    public modelName: string;\r\n    private headers: Headers;\r\n    private serverWithApiUrl: string;\r\n\r\n    // cache data\r\n    public lastGetAll: Array<any>;\r\n    public lastGet: any;\r\n\r\n    constructor(private http: Http) {\r\n        this.modelName = 'to-configure';\r\n\r\n        this.headers = new Headers();\r\n        this.headers.append('Content-Type', 'application/json');\r\n        this.headers.append('Accept', 'application/json');\r\n    }\r\n\r\n    public setApiUrl( url: string) {\r\n      this.serverWithApiUrl = url;\r\n    }\r\n\r\n    // HELPERS\r\n    public getAllFromLS(maxtime = 0): Array<any> {\r\n      const json = localStorage.getItem( 'rest_all_' + this.modelName );\r\n      if ( json ) {\r\n        const obj = JSON.parse(json);\r\n        if ( obj && (obj.date < (Date.now() - maxtime) ) ) {\r\n          return obj;\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n    public getFromCache(id): any {\r\n      if (this.lastGetAll) {\r\n        return this.lastGetAll.find((unit) => unit.id === id);\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n\r\n    private getActionUrl() {\r\n      return this.serverWithApiUrl + this.modelName + '/';\r\n    }\r\n\r\n\r\n    // REST functions\r\n    public getAll(): Observable<any[]> {\r\n        return this.http.get(this.getActionUrl())\r\n            .map((response: Response) => {\r\n              // getting an array having the same name as the model\r\n              const data = response.json()[this.modelName];\r\n              // transforming the array from indexed to associative\r\n              const tab = data.records.map((elem) => {\r\n                const unit = {};\r\n                // using the columns order and number to rebuild the object\r\n                data.columns.forEach( (champ, index) => {\r\n                  unit[champ] = elem[index];\r\n                });\r\n                return unit;\r\n              });\r\n              this.lastGetAll = tab;\r\n              const obj = {\r\n                data: tab,\r\n                date: Date.now()\r\n              };\r\n              localStorage.setItem( 'rest_all_' + this.modelName, JSON.stringify(obj) );\r\n              return tab;\r\n            })\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    public get(id: number): Observable<any> {\r\n        return this.http.get(this.getActionUrl() + id)\r\n            .map((response: Response) => {\r\n              const data = response.json();\r\n              this.lastGet = data;\r\n              return data;\r\n            })\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    public add(item: any): Observable<number> {\r\n        const toAdd = JSON.stringify(item);\r\n\r\n        return this.http.post(this.getActionUrl(), toAdd, { headers: this.headers })\r\n            .map((response: Response) => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    public addAll(tab: Array<any>): Observable<Array<number>> {\r\n      const toAdd = JSON.stringify(tab);\r\n\r\n      return this.http.post(this.getActionUrl(), toAdd, { headers: this.headers })\r\n          .map((response: Response) => response.json())\r\n          .catch(this.handleError);\r\n    }\r\n\r\n    public update(id: number, itemToUpdate: any): Observable<number> {\r\n        return this.http.put(this.getActionUrl() + id, JSON.stringify(itemToUpdate), { headers: this.headers })\r\n            .map((response: Response) => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    public delete(id: number): Observable<Response> {\r\n        return this.http.delete(this.getActionUrl() + id)\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    private handleError(error: Response) {\r\n        console.error(error);\r\n        return Observable.throw(error.json().error || 'Server error');\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}